gmm = gammamixEM(train, k=3, epsilon=0.001)
AIC[k, 1] = calculate.AIC(gmm$loglik, k=3)
kde = npudens(~train)
AIC[k, 2] = calculate.AIC(kde$log_likelihood, k=1)
}
# Mean of log-likelihoods
apply(AIC, 2, mean)
calculate.AIC = function(log.like, k) {
return(2*k - 2*log.like)
}
samp = sample(rep(1:5, ceiling(length(oecd.igdp)/5)), replace=T, size=length(oecd.igdp))
AIC = matrix(NA, 5, 2)
colnames(log.like) = c("GMM", "KDE")
for (k in 1:5) {
train = oecd.igdp[samp!=k]
gmm = gammamixEM(train, k=3, epsilon=0.001)
AIC[k, 1] = calculate.AIC(gmm$loglik, k=3)
kde = npudens(~train)
AIC[k, 2] = calculate.AIC(kde$log_likelihood, k=1)
}
# Mean of log-likelihoods
apply(AIC, 2, mean)
kde$trainiseval
kde$bw
# Mean of log-likelihoods
apply(AIC, 2, mean)
k
for (k in 1:5) {
train = oecd.igdp[samp!=k]
gmm = gammamixEM(train, k=3, epsilon=0.001)
# AIC[k, 1] = calculate.AIC(gmm$loglik, k=3)
AIC[k, 1] = gmm$loglik
kde = npudens(~train)
# AIC[k, 2] = calculate.AIC(kde$log_likelihood, k=1)
AIC[k, 2] = kde$log_likelihood
}
# Mean of log-likelihoods
apply(AIC, 2, mean)
for (k in 1:5) {
train = oecd.igdp[samp!=k]
gmm = gammamixEM(train, k=3, epsilon=0.001)
AIC[k, 1] = calculate.AIC(gmm$loglik, k=3)
kde = npudens(~train)
AIC[k, 2] = calculate.AIC(kde$log_likelihood, k=1)
}
# Mean of log-likelihoods
apply(AIC, 2, mean)
# Function for computing the CDF of a Gaussian mixture
# Quoted from Demo_14_1_Snoqualmie.R
pnormmix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
pnorm.from.mix <- function(x,cluster) {
lambda[cluster]*pgamma(x,shape=mixture$gamma.pars[1,cluster],
scale=mixture$gamma.pars[2,cluster])
}
pnorms <- sapply(1:k,pnorm.from.mix,x=x)
return(rowSums(pnorms))
}
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pnormmix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=".", col="red", cex=2)
abline(0,1)
snoqualmie <- scan("http://www.stat.washington.edu/peter/book.data/set1",skip=1)
snoq <- snoqualmie[snoqualmie > 0]
# Function for plotting the fitted distributions scaled by the mixing weights:
plot.gaussian.clusters <- function(mixture,cluster.number,...) {
curve(mixture$lambda[cluster.number] * dnorm(x,mean=mixture$mu[cluster.number], sd=mixture$sigma[cluster.number]), add=TRUE,...)
}
# Function for computing the PDF of a Gaussian mixture [ADDED]
dnormmix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
dnorm.from.mix <- function(x,cluster) {
lambda[cluster]*dnorm(x,mean=mixture$mu[cluster],
sd=mixture$sigma[cluster])
}
dnorms <- sapply(1:k,dnorm.from.mix,x=x)
return(rowSums(dnorms))
}
###############################################
## Part c: Calibration-checking for the Mixture
###############################################
# Function for computing the CDF of a Gaussian mixture
pnormmix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
pnorm.from.mix <- function(x,cluster) {
lambda[cluster]*pnorm(x,mean=mixture$mu[cluster],
sd=mixture$sigma[cluster])
}
pnorms <- sapply(1:k,pnorm.from.mix,x=x)
return(rowSums(pnorms))
}
# Calibration plot for the two-cluster GMM
# [Shalizi Fig. 19.4]
distinct.snoq <- sort(unique(snoq))
tcdfs <- pnormmix(distinct.snoq,mixture=snoq.k2)
ecdfs <- ecdf(snoq)(distinct.snoq)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1))
snoq.k2 <- normalmixEM(snoq,k=2,maxit=100,epsilon=0.01)
# Calibration plot for the two-cluster GMM
# [Shalizi Fig. 19.4]
distinct.snoq <- sort(unique(snoq))
tcdfs <- pnormmix(distinct.snoq,mixture=snoq.k2)
ecdfs <- ecdf(snoq)(distinct.snoq)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1))
abline(0,1)
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pnormmix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
# Mean of log-likelihoods
apply(AIC, 2, mean)
# 1367.705, 1304.133
```
# Function for computing the CDF of a Gaussian mixture
# Quoted from Demo_14_1_Snoqualmie.R
pnormmix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
pnorm.from.mix <- function(x,cluster) {
lambda[cluster]*pgamma(x,shape=mixture$gamma.pars[1,cluster],
scale=mixture$gamma.pars[2,cluster])
}
pnorms <- sapply(1:k,pnorm.from.mix,x=x)
return(rowSums(pnorms))
}
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pnormmix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1))
abline(0,1)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=20)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=1)
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pnormmix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=1)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=6)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=6)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch=',')
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch='.')
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch='.')
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch='.', cex=3)
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pnormmix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
plot(tcdfs,ecdfs,xlab="Theoretical CDF",ylab="Empirical CDF",xlim=c(0,1),
ylim=c(0,1), pch='.', cex=3, col="red")
abline(0,1)
abline(0,1, cex=1.2)
new.data.1970 = oecdpanel[oecdpanel$year == 1970,]
new.data.1990 = oecdpanel[oecdpanel$year == 1990,]
new.data.1970$inv = new.data.1970$inv + 0.66
new.data.1990$inv = new.data.1990$inv + 0.66
pred.mod1.1970 = unname(predict(Model1, new.data.1970))
pred.mod3.1970 = predict(Model3, newdata=new.data.1970)
pred.mod1.1990 = unname(predict(Model1, newdata=new.data.1990))
pred.mod3.1990 = predict(Model3, newdata=new.data.1990)
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1990), max(pred.mod1.1970)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
points(new.data.1990$growth, pred.mod1.1990, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1990"))
plot(new.data.1970$growth, pred.mod3.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod3.1990), max(pred.mod3.1990)),
xlab="Growth", ylab="Prediction using Model3",
main="Predictions of growth in 1970 and 1990")
points(new.data.1990$growth, pred.mod3.1990, col="blue")
set.seed(100100)
# Function for computing the CDF of a Gaussian mixture
# Quoted from Demo_14_1_Snoqualmie.R
pgammamix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
pnorm.from.mix <- function(x,cluster) {
lambda[cluster]*pgamma(x,shape=mixture$gamma.pars[1,cluster],
scale=mixture$gamma.pars[2,cluster])
}
pgammas <- sapply(1:k,pnorm.from.mix,x=x)
return(rowSums(pgammas))
}
distinct.igdp <- sort(unique(oecd.igdp))
tcdfs <- pgammamix(distinct.igdp, mixture=igdp.k3)
ecdfs <- ecdf(oecd.igdp)(distinct.igdp)
B = 1000
mat = matrix(NA, B, 2)
new.data.1970 = oecdpanel[oecdpanel$year == 1970,]
new.data.1990 = oecdpanel[oecdpanel$year == 1990,]
fixed.data.1970 = new.data.1970
fixed.data.1990 = new.data.1990
fixed.data.1970$inv = fixed.data.1970$inv
fixed.data.1990$inv = fixed.data.1990$inv
summary(new.data.1970$inv)
summary(fixed.data.1970$inv)
new.data.1970 = oecdpanel[oecdpanel$year == 1970,]
new.data.1990 = oecdpanel[oecdpanel$year == 1990,]
fixed.data.1970 = data.frame(new.data.1970)
fixed.data.1970$inv = fixed.data.1970$inv
fixed.data.1990 = data.frame(new.data.1990)
```{r}
new.data.1970 = oecdpanel[oecdpanel$year == 1970,]
new.data.1990 = oecdpanel[oecdpanel$year == 1990,]
fixed.data.1970 = data.frame(new.data.1970)
fixed.data.1990 = data.frame(new.data.1990)
fixed.data.1970
fixed.data.1970$inv = fixed.data.1970$inv
fixed.data.1990$inv = fixed.data.1990$inv
summary(new.data.1970$inv)
summary(fixed.data.1970$inv)
fixed.data.1970$inv = fixed.data.1970$inv + 0.66
fixed.data.1990$inv = fixed.data.1990$inv + 0.66
summary(fixed.data.1970$inv)
summary(new.data.1970$inv)
pred.mod1.1970 = predict(Model1, newdata=new.data.1970)
pred.mod1.1970.fixed = predict(Model1, newdata=fixed.data.1970)
pred.mod3.1970 = predict(Model3, newdata=new.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=fixed.data.1970)
pred.mod1.1990 = predict(Model1, newdata=new.data.1990)
pred.mod1.1990.fixed = predict(Model1, newdata=fixed.data.1990)
pred.mod3.1990 = predict(Model3, newdata=new.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=fixed.data.1990)
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1990), max(pred.mod1.1970)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1990), max(pred.mod1.1970)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
summary(new.data.1970$growth)
summary(fixed.data.1970$growth)
summary(pred.mod1.1970)
summary(pred.mod1.1970.fixed)
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1990"))
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
summary(pred.mod3.1970)
summary(pred.mod3.1970.fixed)
plot(new.data.1970$growth, pred.mod3.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1990$growth)),
ylim=c(min(pred.mod3.1990), max(pred.mod3.1990.fixed)),
xlab="Growth", ylab="Prediction using Model3",
main="Fixed Predictions of growth in 1970 and 1990")
points(new.data.1990$growth, pred.mod3.1990, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1990"))
par(mfrow=c(2,1))
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
par(mfrow=c(1,2))
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
plot(new.data.1970$growth, pred.mod3.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1990$growth)),
ylim=c(min(pred.mod3.1990), max(pred.mod3.1990.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1990")
points(new.data.1990$growth, pred.mod3.1990, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1990", "1990 fixed"))
summary(pred.mod3.1990.fixed)
summary(pred.mod3.1990)
summary(pred.mod1.1990)
summary(pred.mod1.1990.fixed)
summary(pred.mod3.1970)
summary(pred.mod3.1970.fixed)
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
Model3
Model3$resid
Model3$residuals
plot(Model3$mean, oecdpanel$growth-predict(Model3, oecdpanel), pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
y = oecdpanel$growth - predict(Model3, newdata=oecdpanel)
y
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
b=1
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
B = 1000
mat = matrix(NA, B, 2)
for (b in 1:B) {
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
}
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, boot.data.1970)
pred.mod3.1970 = predict(Model3, newdata=boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
B = 1000
mat = matrix(NA, B, 2)
for (b in 1:B) {
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, newdata=boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
}
colnames(mat) = c(1970, 1990)
igdp.kd = npudens(~oecd.igdp)
summary(igdp.kd)
```{r}
samp = sample(rep(1:5, ceiling(nrow(oecdpanel)/5)), size=nrow(oecdpanel))
K = 5
K = 5
samp = sample(rep(1:K, ceiling(nrow(oecdpanel)/K)), size=nrow(oecdpanel))
MSE = matrix(NA, K, 3)
K = 5
samp = sample(rep(1:K, ceiling(nrow(oecdpanel)/K)), size=nrow(oecdpanel))
MSE = matrix(NA, K, 3)
for (k in 1:K) {
train = oecdpanel[samp!=k, ]
test = oecdpanel[samp==k, ]
mod0 = lm(growth ~ ., data=train)
mod1 = step(mod0, direction="backward", k=log(nrow(train)), trace=0)
MSE[k, 1] = mean((test$growth - predict(mod1, newdata=test))^2)
mod2 = gam(growth  ~ s(year, k=4) + s(inv), data=train)
MSE[k, 2] = mean((test$growth - predict(mod2, newdata=test))^2)
mod3 = npreg(growth ~ year + inv, data=train)
MSE[k, 3] = mean((test$growth - predict(mod3, newdata=test))^2)
}
# Mean of MSEs
apply(MSE, 2, mean)
summary(Model3)
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
abline(0, 1, ,col="red")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
abline(0, 1, ,col="red")
# Fit a linear regression
Model0 = lm(growth ~ ., data=oecdpanel)
summary(Model0)
par(mfrow=c(1,2))
plot(Model0$fitted.values, Model0$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residual",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0", pch=".")
abline(1, 0, col="red")
abline(0,1, col="red")
Model2 = gam(growth  ~ s(year, k=4) + s(inv), data=oecdpanel)
summary(Model2)
plot(Model2$fitted.values, Model2$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model2$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model2", pch=".")
abline(0,1, col="red")
Model2 = gam(growth  ~ s(year, k=4) + s(inv), data=oecdpanel)
summary(Model2)
par(mfrow=c(1,2))
plot(Model2$fitted.values, Model2$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model2$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model2", pch=".")
abline(0,1, col="red")
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
summary(Model3)
y = oecdpanel$growth - predict(Model3, newdata=oecdpanel)
par(mfrow=c(1,2))
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model3$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model3", pch=".")
abline(0,1, col="red")
Model3$mean
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
summary(Model3)
y = oecdpanel$growth - Model3$mean
par(mfrow=c(1,2))
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model3$mean,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model3", pch=".")
abline(0,1, col="red")
Model2
Model3
Model2
Model1
Model2
Model1
playByPlay = read.table('NBA Hackathon - Play by Play Data Sample (50 Games).txt')
playByPlay = read.table('NBA Hackathon - Play by Play Data Sample (50 Games)')
setwd("~/Dropbox/Coding/NBA_hackathon/")
playByPlay = read.table('NBA Hackathon - Play by Play Data Sample (50 Games)')
playByPlay = read.table('NBA Hackathon - Play by Play Data Sample (50 Games).txt')
gameLinup = read.table("NBA Hackathon - Game Lineup Data Sample (50 Games).txt")
View(playByPlay)
help(read.table)
playByPlay = read.table("NBA Hackathon - Play by Play Data Sample (50 Games).txt", header=T)
playByPlay = read.table("NBA Hackathon - Play by Play Data Sample (50 Games).txt", header=T)
gameLinup = read.table("NBA Hackathon - Game Lineup Data Sample (50 Games).txt", header=T)
eventCode = read.table("NBA Hackathon - Event Codes.txt", header=T)
View(gameLineup)
gameLinup = read.table("NBA Hackathon - Game Lineup Data Sample (50 Games).txt", header=T)
View(gameLineup)
gameLineup = read.table("NBA Hackathon - Game Lineup Data Sample (50 Games).txt", header=T)
View(gameLineup)
eventCode = read.table("NBA Hackathon - Event Codes.txt", header=T)
eventCode = read.table("NBA Hackathon - Event Codes.txt", header=T, sep=" ")
View(eventCode)
eventCode = read.table("NBA Hackathon - Event Codes.txt", header=T)
View(eventCode)
subsetted = subset(playByPlay$Event_Msg_Type == 1 || playByPlay$Event_Msg_Type == 6)
subsetted = subset(playByPlay$Event_Msg_Type == 1 || playByPlay$Event_Msg_Type == 6)
help(subset)
subsetted = subset(playByPlay, playByPlay$Event_Msg_Type == 1 || playByPlay$Event_Msg_Type == 6)
View(subsetted)
View(subsetted)
