summary(fixed.data.1970$inv)
summary(new.data.1970$inv)
pred.mod1.1970 = predict(Model1, newdata=new.data.1970)
pred.mod1.1970.fixed = predict(Model1, newdata=fixed.data.1970)
pred.mod3.1970 = predict(Model3, newdata=new.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=fixed.data.1970)
pred.mod1.1990 = predict(Model1, newdata=new.data.1990)
pred.mod1.1990.fixed = predict(Model1, newdata=fixed.data.1990)
pred.mod3.1990 = predict(Model3, newdata=new.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=fixed.data.1990)
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1990), max(pred.mod1.1970)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1990), max(pred.mod1.1970)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
summary(new.data.1970$growth)
summary(fixed.data.1970$growth)
summary(pred.mod1.1970)
summary(pred.mod1.1970.fixed)
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970 and 1990")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1990"))
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
summary(pred.mod3.1970)
summary(pred.mod3.1970.fixed)
plot(new.data.1970$growth, pred.mod3.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1990$growth)),
ylim=c(min(pred.mod3.1990), max(pred.mod3.1990.fixed)),
xlab="Growth", ylab="Prediction using Model3",
main="Fixed Predictions of growth in 1970 and 1990")
points(new.data.1990$growth, pred.mod3.1990, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1990"))
par(mfrow=c(2,1))
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
par(mfrow=c(1,2))
plot(new.data.1970$growth, pred.mod1.1970,
xlim=c(min(new.data.1970$growth), max(new.data.1970$growth)),
ylim=c(min(pred.mod1.1970), max(pred.mod1.1970.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1970")
points(new.data.1970$growth, pred.mod1.1970.fixed, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1970", "1970 fixed"))
plot(new.data.1970$growth, pred.mod3.1970,
xlim=c(min(new.data.1990$growth), max(new.data.1990$growth)),
ylim=c(min(pred.mod3.1990), max(pred.mod3.1990.fixed)),
xlab="Growth", ylab="Prediction using Model1",
main="Predictions of growth in 1990")
points(new.data.1990$growth, pred.mod3.1990, col="blue")
legend("bottomright", pch=c(1,1), col=c("black", "blue"), legend=c("1990", "1990 fixed"))
summary(pred.mod3.1990.fixed)
summary(pred.mod3.1990)
summary(pred.mod1.1990)
summary(pred.mod1.1990.fixed)
summary(pred.mod3.1970)
summary(pred.mod3.1970.fixed)
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
Model3
Model3$resid
Model3$residuals
plot(Model3$mean, oecdpanel$growth-predict(Model3, oecdpanel), pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
y = oecdpanel$growth - predict(Model3, newdata=oecdpanel)
y
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
b=1
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
B = 1000
mat = matrix(NA, B, 2)
for (b in 1:B) {
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
}
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, boot.data.1970)
pred.mod3.1970 = predict(Model3, newdata=boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
B = 1000
mat = matrix(NA, B, 2)
for (b in 1:B) {
boot.data.1970 = new.data.1970[sample(1:nrow(new.data.1970), nrow(new.data.1970), replace=T), ]
boot.data.1990 = new.data.1990[sample(1:nrow(new.data.1990), nrow(new.data.1990), replace=T), ]
boot.data.1970.fixed = data.frame(boot.data.1970)
boot.data.1970.fixed$inv = boot.data.1970.fixed$inv + 0.66
boot.data.1990.fixed = data.frame(boot.data.1990)
boot.data.1990.fixed$inv = boot.data.1990.fixed$inv + 0.66
pred.mod3.1970 = predict(Model3, newdata=boot.data.1970)
pred.mod3.1970.fixed = predict(Model3, newdata=boot.data.1970.fixed)
pred.mod3.1990 = predict(Model3, newdata=boot.data.1990)
pred.mod3.1990.fixed = predict(Model3, newdata=boot.data.1990.fixed)
mat[b, 1] = mean(pred.mod1.1970 - pred.mod1.1970.fixed)
mat[b, 1] = mean(pred.mod3.1990 - pred.mod3.1990.fixed)
}
colnames(mat) = c(1970, 1990)
igdp.kd = npudens(~oecd.igdp)
summary(igdp.kd)
```{r}
samp = sample(rep(1:5, ceiling(nrow(oecdpanel)/5)), size=nrow(oecdpanel))
K = 5
K = 5
samp = sample(rep(1:K, ceiling(nrow(oecdpanel)/K)), size=nrow(oecdpanel))
MSE = matrix(NA, K, 3)
K = 5
samp = sample(rep(1:K, ceiling(nrow(oecdpanel)/K)), size=nrow(oecdpanel))
MSE = matrix(NA, K, 3)
for (k in 1:K) {
train = oecdpanel[samp!=k, ]
test = oecdpanel[samp==k, ]
mod0 = lm(growth ~ ., data=train)
mod1 = step(mod0, direction="backward", k=log(nrow(train)), trace=0)
MSE[k, 1] = mean((test$growth - predict(mod1, newdata=test))^2)
mod2 = gam(growth  ~ s(year, k=4) + s(inv), data=train)
MSE[k, 2] = mean((test$growth - predict(mod2, newdata=test))^2)
mod3 = npreg(growth ~ year + inv, data=train)
MSE[k, 3] = mean((test$growth - predict(mod3, newdata=test))^2)
}
# Mean of MSEs
apply(MSE, 2, mean)
summary(Model3)
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
abline(0, 1, ,col="red")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
abline(0, 1, ,col="red")
# Fit a linear regression
Model0 = lm(growth ~ ., data=oecdpanel)
summary(Model0)
par(mfrow=c(1,2))
plot(Model0$fitted.values, Model0$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residual",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0")
plot(oecdpanel$growth, Model0$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model0", pch=".")
abline(1, 0, col="red")
abline(0,1, col="red")
Model2 = gam(growth  ~ s(year, k=4) + s(inv), data=oecdpanel)
summary(Model2)
plot(Model2$fitted.values, Model2$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model2$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model2", pch=".")
abline(0,1, col="red")
Model2 = gam(growth  ~ s(year, k=4) + s(inv), data=oecdpanel)
summary(Model2)
par(mfrow=c(1,2))
plot(Model2$fitted.values, Model2$residuals, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, col="blue", lty=2)
plot(oecdpanel$growth, Model2$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model2", pch=".")
abline(0,1, col="red")
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
summary(Model3)
y = oecdpanel$growth - predict(Model3, newdata=oecdpanel)
par(mfrow=c(1,2))
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model3$fitted.values,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model3", pch=".")
abline(0,1, col="red")
Model3$mean
Model3 = npreg(growth ~ year + inv, data=oecdpanel)
summary(Model3)
y = oecdpanel$growth - Model3$mean
par(mfrow=c(1,2))
plot(Model3$mean, y, pch=".",
xlab="Fitted Growth",
ylab="Residuals",
main="Residual plot of Growth")
abline(h=0, lty=2, col="blue")
plot(oecdpanel$growth, Model3$mean,
xlab="Real Growth",
ylab="Predicted Growth",
main="Fit of the Model3", pch=".")
abline(0,1, col="red")
Model2
Model3
Model2
Model1
Model2
Model1
new.train = read.csv("new_train.csv")
setwd("/home/ch/Dropbox/Coding/NBA_hackathon/business_analytics")
```{r}
game = read.csv("game_data.csv")
player = read.csv("player_data.csv")
test = read.csv("test_set.csv")
train = read.csv("training_set.csv")
new.train = read.csv("new_train.csv")
View(new.train)
View(game)
View(player)
View(train)
new.train$X = NULL
# Find the total number of fouls per each game
game_ids = as.character(levels(unique(game$Game_ID)))
game_ids
levels(unique(game$Game_ID))
game$Game_ID
unique(game$Game_ID)
game.ids
# Find the total number of fouls per each game
game.ids = unique(game$Game_ID)
head(game.ids)
find.fouls(player)
find.fouls = function(player_df) {
fouls = c()
for (g.id in game.ids) {
subsetted = subset(player_df, Game_ID == g.id)
total.fouls = sum(subsetted$Personal_Fouls)
fouls = c(fouls, total.fouls)
}
return(fouls)
}
find.fouls(player)
nrow(new.train)
length(unique(new.train$Game_ID))
length(Game_ID)
length(game.ids)
# Find the total number of fouls per each game
game.ids = new.train$Game_ID
find.fouls = function(player_df) {
fouls = c()
for (g.id in game.ids) {
subsetted = subset(player_df, Game_ID == g.id)
total.fouls = sum(subsetted$Personal_Fouls)
fouls = c(fouls, total.fouls)
}
return(fouls)
}
find.fouls(player)
# Find the total number of fouls per each game
game.ids = new.train$Game_ID
find.fouls = function(player_df) {
fouls = c()
for (g.id in game.ids) {
subsetted = subset(player_df, Game_ID == g.id)
total.fouls = sum(subsetted$Personal_Fouls)
fouls = c(fouls, total.fouls)
}
return(fouls)
}
find.fouls(player)
length(unique(player$Game_ID))
length(game.ids)
length(fouls)
# Find the total number of fouls per each game
game.ids = new.train$Game_ID
find.fouls = function(player_df) {
fouls = c()
for (g.id in game.ids) {
subsetted = subset(player_df, Game_ID == g.id)
total.fouls = sum(subsetted$Personal_Fouls)
fouls = c(fouls, total.fouls)
}
return(fouls)
}
fouls = find.fouls(player)
length(fouls)
nrow(new.train)
fousl
fousl
fousl
fouls
new.train$total_fouls = fouls
help (lm)
lm(Total_Viewers ~ ., data = new.train)
head(new.train)
lm(Total_Viewers ~ ., data = new.train)
reg = lm(Total_Viewers ~ ., data = new.train)
reg$residuals
plot(reg$residuals)
reg$coefficients
ls
reg = lm(Total_Viewers ~ Game_Date + Away_Team + Home_team + All_Starts_Total + Home_Win + total_fouls)
reg = lm(Total_Viewers ~ Game_Date + Away_Team + Home_team + All_Starts_Total + Home_Win + total_fouls, data = new.train)
reg = lm(Total_Viewers ~ Game_Date + Away_Team + Home_Team + All_Starts_Total + Home_Win + total_fouls, data = new.train)
reg = lm(Total_Viewers ~ Game_Date + Away_Team + Home_Team + All_Stars_Total + Home_Win + total_fouls, data = new.train)
reg
new.train$All_Stars_Away
new.train$Away_Team
plot(new.train$Total_Viewers, reg$fitted.values)
reg$fitted.values
reg$coefficients
reg = lm(Total_Viewers ~ Away_Team + Home_Team + All_Stars_Total + Home_Win + total_fouls, data = new.train)
plot(new.train$Total_Viewers, reg$fitted.values)
plot(reg$residuals)
plot(new.train$Total_Viewers, reg$fitted.values)
plot(reg$residuals)
new.train$away = levels(new.train$Away_Team)
plot(new.train$Total_Viewers, reg$fitted.values)
summary(reg)
reg = lm(Total_Viewers ~ Game_ID + All_Stars_Total + Home_Win + total_fouls)
reg = lm(Total_Viewers ~ Game_ID + All_Stars_Total + Home_Win + total_fouls, data=new.train)
summary(reg)
plot(new.train$Total_Viewers, reg$fitted.values)
View(game)
#Win/Lose added column for game data
game$Win = FALSE
for(i in seq(1,nrow(game),2))
)
for(i in seq(1,nrow(game),2))
{
ID <- game[i,2]
team = subset(game, game$Game_ID == ID)
if(is.na(team$Final_Score[1]) || is.na(team$Final_Score[2]))
{
next
}
points1 = team$Final_Score[1]
points2 = team$Final_Score[2]
print(points1)
print(points2)
#if(points1 == NA || points2 == NA)
#{
#  next
#}
if(points1 > points2)
{
game[i,length(game)] = TRUE
game[i+1,length(game)] = FALSE
}
else
{
game[i,length(game)] = FALSE
game[i+1,length(game)] = TRUE
}
}
View(game)
write.csv(game, )
write.csv(game, "game_data.csv")
write.csv(game, "game_data.csv", row.names = F)
reg$coefficients
summary(new.train$Total_Viewers)
sd(new.train$Total_Viewers)
group_by(train, Country)
library(dplyr)
group_by(train, Country)
View(group_by(train, Country))
help(group_by0)
help(group_by)
plot(new.train$Total_Viewers, reg$fitted.values)
reg$coefficients
summary(reg)
View(test)
head(country_dist)
# Chunk 1
game = read.csv("game_data.csv")
player = read.csv("player_data.csv")
test = read.csv("test_set.csv")
train = read.csv("training_set.csv")
new.train = read.csv("new_train.csv")
new.train$X = NULL
# Chunk 2
# Make a new test data that contains country information
countries = unique(train$Country)
new_test = matrix(nrow = 0, ncol = length(colnames(train)[1:6]))
colnames(new_test) = colnames(train)[1:6]
for(i in nrow(test)) {
season = test$Season[i]
game = test$Game_ID[i]
date = test$Game_Date[i]
away = test$Away_Team[i]
home = test$Home_Team[i]
for(country in countries) {
new_test = rbind(new_test, list(season = season, game = game, date = date, away = away, home = home, country = country))
}
}
# Chunk 3
# Add whether that team won or lost in the game dataset
# teams = as.vector(unique(game$Team))
# for (row in game) {
#
# }
countries = unique(train$Country)
home_teams = unique(train$Home_Team)
home_data = matrix(nrow = 0, ncol = length(countries) + 1)
colnames(home_data) = c("Country", as.character(countries))
for (team in home_teams)
{
#team = home_teams[i]
this.list = c(team)
for (country in countries)
{
s = subset(train, train$Country == country & train$Home_Team == team)
total.viewers = sum(s$Rounded.Viewers)
this.list = c(this.list, total.viewers)
}
home_data = rbind(home_data, this.list)
}
# home_data = as.character(home_teams)
country_dist = data.frame(home_data)
# Load datas
train = read.csv("new_train.csv")
test = read.csv("new_test.csv")
twitter.df = read.csv("nba_twitter_account.csv")
player.df = read.csv("player_data.csv")
# Set up twitter oauth
library(twitteR)
consumer.key = "kGlFqeLPOaiTUtLJY3MehG7M6"
consumer.secret = "MKizE8NlxQ6ZOPHrsHkgjRo9SXSWnXX5KSudun9EogB5f3oMIp"
access.token = "946052093961539589-CW2EiM7s5koqcAnSw355kJns0uf1ah0"
access.secret = "fPxzv1fkYLSYcJWHMTqVHSkXFqEs1xRUyqUAbR1Viyyfs"
setup_twitter_oauth(consumer.key, consumer.secret, access.token, access.secret)
update.twitter.followers = function(df, twitter.df, player.df) {
# Main loop to find active players for each game and find twitter followers
home.total.followers = c()
away.total.followers = c()
for (i in 1:nrow(df)) {
game.id = df$Game_ID[i]
home.team = df$Home_Team[i]
away.team = df$Away_Team[i]
home.subsetted = subset(player.df, Game_ID == game.id & Active_Status == "Active" & Team == home.team)
away.subsetted = subset(player.df, Game_ID == game.id & Active_Status == "Active" & Team == away.team)
home.twit = subset(twitter.df, Player %in% home.subsetted$Name)$Twitter
away.twit = subset(twitter.df, Player %in% away.subsetted$Name)$Twitter
home.twit.character = levels(home.twit)[home.twit]
away.twit.character = levels(away.twit)[away.twit]
home.twit.obj = sapply(home.twit.character,
function(t) {
tryCatch(getUser(t), error = function(e) { getUser("AntonSturluson") })
})
away.twit.obj = sapply(away.twit.character,
function(t) {
tryCatch(getUser(t), error = function(e) { getUser("AntonSturluson") })
})
print(home.twit.obj)
home.followers = sum(sapply(home.twit.obj, followersCount))
away.followers = sum(sapply(away.twit.obj, followersCount))
home.total.followers - c(home.total.followers, home.followers)
away.total.followers = c(away.total.followers, away.followers)
}
df$Home_Twit_Followers = home.total.followers
df$Away_Twit_Followers = away.total.followers
return(df)
}
train.tmp = update.twitter.followers(train, twitter.df, player.df)
getUser("RealTristan13")
